<?php

namespace KoiBundle\Repository;

/**
 * FeedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class FeedRepository extends \Doctrine\ORM\EntityRepository
{
	/**
	 * Return all the feed that will compare
	 * @param $checked
	 * @return array|int
	 */
	public function getFeedToCompare($checked)
	{
		$where = "";

		foreach ($checked as $data_value => $id_value) {
			$where = $where . ' OR (' . 'f.id = ' . intval(trim($id_value, '""')) . ')';
		}

		if ($where == "") {
			return 0;
		}

		else {
			$where = substr($where, 4);
			$query = $this->createQueryBuilder('f')
				->where($where)
				->getQuery();

			return $compare = $query->getResult();
		}
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Return feed like search param
	 * @param $search_param
	 * @return array
	 */

	public function getSearch($search_param)
	{
		if ($search_param != "") {
			$query = $this->createQueryBuilder('f')
				->where('f.nameFeed LIKE :param')
				->setParameter('param', '%'.$search_param.'%')
				->getQuery();
		}
		else {
			$query = $this->createQueryBuilder('f')
				->getQuery();
		}

		return $result = $query->getResult();
	}
	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Sorting
	 * @param $order_param
	 * @param $array_feed
	 * @return array
	 */

	public function getOrder($order_param, $array_feed)
	{
		$where = "";
		$firstLine = strpos($order_param, '-');
		$sort = 'ASC';
		$sortBy = 'f.id';
		$sortParam = substr($order_param, $firstLine + 1, 3);

		if (substr($order_param, -3) == 'col') {
			$sortBy = 'f.' . substr($order_param, 0, $firstLine);

			if ($sortParam == 'asc') {
				$sort = 'ASC';
			} elseif ($sortParam == 'des') {
				$sort = 'DESC';
			}
		}

		if(count($array_feed) > 0) {
			foreach ($array_feed as $array_feedActive) {
				$where = $where . ' OR (' . 'f.id = ' . $array_feedActive . ')';
			}
		}

		else {
			$where = $where . ' AND f.id = 0';
		}


		$where = substr($where, 4);
		$query = $this->createQueryBuilder('f')
			->where($where)
			->orderBy($sortBy, $sort)
			->getQuery();

		return $query->getResult();
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * @param array $filter
	 * @return array
	 */

	public function getFilter($filter = [])
	{
		$where = "";

		foreach ($filter as $name_filter => $value_filter) {
			if (substr($name_filter, -7) == 'min-col'
				&& $value_filter)
			{
				$where = $where . ' AND (' . 'f.' . substr($name_filter, 0, -8) . ' >= ' . $value_filter . ')';
			}

			if (substr($name_filter, -7) == 'max-col'
				&& $value_filter)
			{
				$where = $where . ' AND (' . 'f.' . substr($name_filter, 0, -8) . ' <= ' . $value_filter . ')';
			}

			if ($name_filter == 'colorant')
			{
				if ($value_filter == 'yes')
				{
					$where = $where . ' AND (' . 'f.' .  $name_filter . ' IS NOT NULL' . ')';
				}
				elseif ($value_filter == 'no')
				{
					$where = $where . ' AND (' . 'f.' . $name_filter . ' IS NULL' . ')';
				}
			}
		}

		if ($where == "") {
			$query = $this->createQueryBuilder('f')
				->getQuery();
		} else {
			$where = substr($where, 4);

			$query = $this->createQueryBuilder('f')
				->where($where)
				->getQuery();
		}

		return $query->getResult();
	}


	// Admin functions -------------------------------------------------------------------------------------------------

	public function getDelete($id)
	{
		$query = "";
		$key = "";

		foreach ($id as $key => $value) {
			if ($key != "") {
				$query = $this->createQueryBuilder('f')
					->delete()
					->where('f.id = ' . $key)
					->getQuery()->execute();
			}
		}
		return array($query, $key);
	}
}
