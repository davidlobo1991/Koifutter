<?php

namespace Proxies\__CG__\KoiBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Feed extends \KoiBundle\Entity\Feed implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'id', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'nameFeed', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'waterTemperature', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'pelletSizeMin', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'pelletSizeMax', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'colorant', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'idDistributor', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'components', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'seasons', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'elements'];
        }

        return ['__isInitialized__', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'id', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'nameFeed', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'waterTemperature', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'pelletSizeMin', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'pelletSizeMax', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'colorant', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'idDistributor', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'components', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'seasons', '' . "\0" . 'KoiBundle\\Entity\\Feed' . "\0" . 'elements'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Feed $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNameFeed($nameFeed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNameFeed', [$nameFeed]);

        return parent::setNameFeed($nameFeed);
    }

    /**
     * {@inheritDoc}
     */
    public function getNameFeed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNameFeed', []);

        return parent::getNameFeed();
    }

    /**
     * {@inheritDoc}
     */
    public function setWaterTemperature($waterTemperature)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWaterTemperature', [$waterTemperature]);

        return parent::setWaterTemperature($waterTemperature);
    }

    /**
     * {@inheritDoc}
     */
    public function getWaterTemperature()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWaterTemperature', []);

        return parent::getWaterTemperature();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdDistributor($idDistributor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdDistributor', [$idDistributor]);

        return parent::setIdDistributor($idDistributor);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdDistributor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdDistributor', []);

        return parent::getIdDistributor();
    }

    /**
     * {@inheritDoc}
     */
    public function setPelletSizeMin($pelletSizeMin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPelletSizeMin', [$pelletSizeMin]);

        return parent::setPelletSizeMin($pelletSizeMin);
    }

    /**
     * {@inheritDoc}
     */
    public function getPelletSizeMin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPelletSizeMin', []);

        return parent::getPelletSizeMin();
    }

    /**
     * {@inheritDoc}
     */
    public function setPelletSizeMax($pelletSizeMax)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPelletSizeMax', [$pelletSizeMax]);

        return parent::setPelletSizeMax($pelletSizeMax);
    }

    /**
     * {@inheritDoc}
     */
    public function getPelletSizeMax()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPelletSizeMax', []);

        return parent::getPelletSizeMax();
    }

    /**
     * {@inheritDoc}
     */
    public function setColorant($colorant)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColorant', [$colorant]);

        return parent::setColorant($colorant);
    }

    /**
     * {@inheritDoc}
     */
    public function getColorant()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColorant', []);

        return parent::getColorant();
    }

    /**
     * {@inheritDoc}
     */
    public function setSeasons($seasons)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSeasons', [$seasons]);

        return parent::setSeasons($seasons);
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function removeComponent(\KoiBundle\Entity\FeedComponent $component)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeComponent', [$component]);

        return parent::removeComponent($component);
    }

    /**
     * {@inheritDoc}
     */
    public function getComponents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComponents', []);

        return parent::getComponents();
    }

    /**
     * {@inheritDoc}
     */
    public function addComponent(\KoiBundle\Entity\FeedComponent $component)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComponent', [$component]);

        return parent::addComponent($component);
    }

    /**
     * {@inheritDoc}
     */
    public function addSeason(\KoiBundle\Entity\FeedSeason $season)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSeason', [$season]);

        return parent::addSeason($season);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSeason(\KoiBundle\Entity\FeedSeason $season)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSeason', [$season]);

        return parent::removeSeason($season);
    }

    /**
     * {@inheritDoc}
     */
    public function getSeasons()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSeasons', []);

        return parent::getSeasons();
    }

    /**
     * {@inheritDoc}
     */
    public function addElement(\KoiBundle\Entity\FeedElement $element)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addElement', [$element]);

        return parent::addElement($element);
    }

    /**
     * {@inheritDoc}
     */
    public function removeElement(\KoiBundle\Entity\FeedElement $element)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeElement', [$element]);

        return parent::removeElement($element);
    }

    /**
     * {@inheritDoc}
     */
    public function getElements()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getElements', []);

        return parent::getElements();
    }

}
